
<div>
    @ChildContent
</div>
@* @if (TrimVerificationList is not null)
{
    <img src="@_referenceImage" style="max-width: 100%; display: block;" />
    <div>
        <PrimaryButton OnClick="SaveTrimTestPreview">
            Save To Test File
        </PrimaryButton>
    </div>
    return;
} *@
<div style="height: @ContainerHeight;">
    <StackLayout>
        <StackItem Length="65vw">
            @if (OnTrimsConfirmed.HasDelegate)
            {
                <div>Use F1 To Confirm All Trims And Save</div>
            }
            <div style="overflow: auto; max-width: 100%; max-height: 100%;">
                <div style="position: relative; width: fit-content;">
                    <img src="@CurrentImage" @ref="_imageRef" style="display: block; image-rendering: pixelated;" @onclick="HandleImageClickAsync" />
                    
                    @if (_currentMode != EnumTrimViewModel.None)
                    {
                        var list = GetRemovalsForCurrentSlice;
                        @foreach (var item in list)
                        {
                            <div style="
                                position: absolute;
                                background-color: white;
                                left: @(item.X)px;
                                top: @(item.Y)px;
                                width: @(item.Width)px;
                                height: @(item.Height)px;">
                            </div>
                        }
                    }
                    
                    @if (_startPoint.HasValue)
                    {
                        <div style="
                                            position: absolute;
                                            width: 8px;
                                            height: 8px;
                                            background: red;
                                            border-radius: 4px;
                                                left: @(_startPoint.Value.X - 4)px;
                                                top: @(_startPoint.Value.Y - 4)px;">
                        </div>
                    }

                    @if (_endPoint.HasValue)
                    {
                        <div style="
                                            position: absolute;
                                            width: 8px;
                                            height: 8px;
                                            background: blue;
                                            border-radius: 4px;
                                            left: @(_endPoint.Value.X - 4)px;
                                            top: @(_endPoint.Value.Y - 4)px;">
                        </div>
                    }

                    @if (_startPoint.HasValue && _endPoint.HasValue)
                    {
                        <div style="
                                            position: absolute;
                                            border: 2px dashed lime;
                                            left: @(Math.Min(_startPoint.Value.X, _endPoint.Value.X))px;
                                            top: @(Math.Min(_startPoint.Value.Y, _endPoint.Value.Y))px;
                                            width: @(Math.Abs(_endPoint.Value.X - _startPoint.Value.X))px;
                                            height: @(Math.Abs(_endPoint.Value.Y - _startPoint.Value.Y))px;">
                        </div>
                    }
                    

                </div>
            </div>
            
        </StackItem>
        <StackItem Length="35vw">
            <img src="@_referenceImage" style="max-width: 100%; display: block;" />
        </StackItem>
    </StackLayout>
</div>

<StackLayout ItemSpacing="10px">
    <StackItem>
        @if (_currentMode != EnumTrimViewModel.None)
        {
            <PrimaryButton OnClick="ShowPreview">
                Show Preview (F3)
            </PrimaryButton>
        }
        @if (_startPoint.HasValue && _endPoint.HasValue)
        {
            <PrimaryButton OnClick="ClearCurrentSelection">
            Clear Current Selection
            </PrimaryButton>
            <PrimaryButton OnClick="ConfirmCurrentSelection">
                Confirm Current Selection (F2)
            </PrimaryButton>
        
            <PrimaryButton OnClick="ClearRegions">
                Start Completely Over
            </PrimaryButton>
        }
        
    </StackItem>
    @if (_startPoint.HasValue && _endPoint.HasValue)
    {
        <StackItem Length="150px">
            Selection Mode
            @GetModeSvgIcon(_adjustmentMode)
        </StackItem>
        <StackItem>
            <div>
                F4 For Move
            </div>
            <div>
                F5 For Resize
            </div>
            <div>
                F6 For Adjust Edges
            </div>
        </StackItem>
    }
</StackLayout>
@code {
    private RenderFragment GetModeSvgIcon(EnumAdjustmentMode mode) => mode switch
    {

        EnumAdjustmentMode.Move => builder =>
    {
        builder.AddMarkupContent(0, @"<svg xmlns=""http://www.w3.org/2000/svg"" fill=""none"" viewBox=""0 0 24 24"" stroke=""blue"" stroke-width=""2"" width=""24"" height=""24"">
  <path stroke-linecap=""round"" stroke-linejoin=""round"" d=""M4 8V4m0 0h4M4 4l7.5 7.5M20 16v4m0 0h-4m4 0l-7.5-7.5"" />
</svg>");
    }
        ,
        EnumAdjustmentMode.Resize => builder =>
        {
            builder.AddMarkupContent(0, ResizeIcon());
        }
        ,
        EnumAdjustmentMode.AdjustEdges => builder =>
        {
            builder.AddMarkupContent(0, @"<svg xmlns=""http://www.w3.org/2000/svg"" fill=""none"" viewBox=""0 0 24 24"" stroke=""blue"" stroke-width=""2"" width=""24"" height=""24"">
  <path stroke-linecap=""round"" stroke-linejoin=""round"" d=""M12 4v16m8-8H4"" />
</svg>");
        }
        ,
        _ => builder => { }
    };
}