@if (ShowCroppedImages)
{
    if (_firstRectangle is null)
    {
        <div>
            You must have at least the first rectangle
        </div>
        return;
    }
    if (_secondRectangle is null)
    {
        @ChildContent
        <br />
        <img style="max-width: 100%; display: block;" src="@GetFirstRegionImageBase64()" />
        return; //only one so does not matter the order.
    }
    @ChildContent
    <br />
    if (LayoutMode == EnumRegionLayoutMode.Landscape)
    {
        <StackLayout>
            <StackItem>
                <img style="max-width: 100%; display: block;" src="@GetFirstRegionImageBase64()" />
            </StackItem>
            <StackItem>
                <img style="max-width: 100%; display: block;" src="@GetSecondRegionImageBase64()" />
            </StackItem>
        </StackLayout>
    }
    else
    {
        <img style="max-width: 100%; display: block;" src="@GetFirstRegionImageBase64()" />
        <br />
        <img style="max-width: 100%; display: block;" src="@GetSecondRegionImageBase64()" />
    }
    return;
}
<LeftOverLayout>
    <TopContent>
        @ChildContent
    </TopContent>
    <MainContent>
        <div style="position: relative; display: inline-block;">
            <img src="@ImageData" @ref="_imageRef" @onload="OnImageLoaded" style="max-width: 100%; display: block;" @onmousedown="HandleClick" />
            @if (StartPoint.HasValue)
            {
                <div style="
                            position: absolute;
                            width: 8px;
                            height: 8px;
                            background: red;
                            border-radius: 4px;
                            left: @(StartPoint.Value.X - 4)px;
                            top: @(StartPoint.Value.Y - 4)px;">
                </div>
            }

            @if (EndPoint.HasValue)
            {
                <div style="
                            position: absolute;
                            width: 8px;
                            height: 8px;
                            background: blue;
                            border-radius: 4px;
                            left: @(EndPoint.Value.X - 4)px;
                            top: @(EndPoint.Value.Y - 4)px;">
                </div>
            }

            @if (_firstRectangle is not null)
            {
                <div style="
                    position: absolute;
                    border: 2px dashed lime;
                    left: @(Math.Min(_firstRectangle.Value.X, _firstRectangle.Value.X + _firstRectangle.Value.Width))px;
                    top: @(Math.Min(_firstRectangle.Value.Y, _firstRectangle.Value.Y + _firstRectangle.Value.Height))px;
                    width: @(Math.Abs(_firstRectangle.Value.Width))px;
                    height: @(Math.Abs(_firstRectangle.Value.Height))px;">
                </div>
            }

            @if (_secondRectangle is not null)
            {
                <div style="
                    position: absolute;
                    border: 2px dashed lime;
                    left: @(Math.Min(_secondRectangle.Value.X, _secondRectangle.Value.X + _secondRectangle.Value.Width))px;
                    top: @(Math.Min(_secondRectangle.Value.Y, _secondRectangle.Value.Y + _secondRectangle.Value.Height))px;
                    width: @(Math.Abs(_secondRectangle.Value.Width))px;
                    height: @(Math.Abs(_secondRectangle.Value.Height))px;">
                </div>
            }
        </div>
    </MainContent>
    <BottomContent>
        <StackLayout ItemSpacing="10px">
            <StackItem>
                @if (_currentStep == EnumRegionStep.SelectingFirst)
                {
                    <div>
                        Choosing First Region
                    </div>
                }
                else if (_currentStep == EnumRegionStep.SelectingSecond)
                {
                    <div>
                        Choosing Second Region
                    </div>
                }
               
            </StackItem>
            <StackItem>
                <PrimaryButton OnClick="ClearSelection">
                    Clear
                </PrimaryButton>
            </StackItem>
            @if (_firstRectangle is not null || _secondRectangle is not null)
            {
                <StackItem Length="150px">
                    Selection Mode 
                    @GetModeSvgIcon(_currentMode)
                </StackItem>
                <StackItem>
                    <div>
                        F1 For Move
                    </div>
                    <div>
                        F2 For Resize
                    </div>
                    <div>
                        F4 For Adjust Edges
                    </div>
                </StackItem>
                

                @* <StackItem>
                    <ArrowLeftComponent BackgroundColor="aqua"
                                        TargetHeight="8vh"
                                        StrokeColor="black"
                                        Clicked="LeftArrowClicked" />
                    <ArrowRightComponent BackgroundColor="aqua"
                                         StrokeColor="black"
                                         TargetHeight="8vh"
                                         Clicked="RightArrowClicked" />

                    <ArrowUpComponent BackgroundColor="aqua"
                                      StrokeColor="black"
                                      TargetHeight="8vh"
                                      Clicked="UpArrowClicked" />

                    <ArrowDownComponent BackgroundColor="aqua"
                                        StrokeColor="black"
                                        TargetHeight="8vh"
                                        Clicked="DownArrowClicked" />
                </StackItem> *@
            }
        </StackLayout>

    </BottomContent>
</LeftOverLayout>
@code {
    private RenderFragment GetModeSvgIcon(EnumAdjustmentMode mode) => mode switch
    {
        
        EnumAdjustmentMode.Move => builder =>
    {
        builder.AddMarkupContent(0, @"<svg xmlns=""http://www.w3.org/2000/svg"" fill=""none"" viewBox=""0 0 24 24"" stroke=""blue"" stroke-width=""2"" width=""24"" height=""24"">
  <path stroke-linecap=""round"" stroke-linejoin=""round"" d=""M4 8V4m0 0h4M4 4l7.5 7.5M20 16v4m0 0h-4m4 0l-7.5-7.5"" />
</svg>");
    }
        ,
        EnumAdjustmentMode.Resize => builder =>
        {
            builder.AddMarkupContent(0, ResizeIcon());
        }
        ,
        EnumAdjustmentMode.AdjustEdges => builder =>
        {
            builder.AddMarkupContent(0, @"<svg xmlns=""http://www.w3.org/2000/svg"" fill=""none"" viewBox=""0 0 24 24"" stroke=""blue"" stroke-width=""2"" width=""24"" height=""24"">
  <path stroke-linecap=""round"" stroke-linejoin=""round"" d=""M12 4v16m8-8H4"" />
</svg>");
        }
        ,
        _ => builder => { }
    };
}